//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.2.0
//     from Assets/Input/PlayerInputs.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerInputs : IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerInputs()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerInputs"",
    ""maps"": [
        {
            ""name"": ""Mobile Input"",
            ""id"": ""0f15152d-5bbb-4133-bd4a-a144e8234118"",
            ""actions"": [
                {
                    ""name"": ""Primary"",
                    ""type"": ""Value"",
                    ""id"": ""4eb556ec-e94e-46df-be16-9f20b75834de"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Secondary"",
                    ""type"": ""Value"",
                    ""id"": ""cc8f1ebc-faca-4d82-a775-0dc4b15bda95"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""8b16e90b-cb74-4c8d-b2be-558a7ce4e359"",
                    ""path"": ""<Touchscreen>/touch0/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Primary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9220bdf9-8699-4df0-8466-f48a429d3d20"",
                    ""path"": ""<Touchscreen>/touch1/press"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Secondary"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Mobile Input
        m_MobileInput = asset.FindActionMap("Mobile Input", throwIfNotFound: true);
        m_MobileInput_Primary = m_MobileInput.FindAction("Primary", throwIfNotFound: true);
        m_MobileInput_Secondary = m_MobileInput.FindAction("Secondary", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }
    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }
    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Mobile Input
    private readonly InputActionMap m_MobileInput;
    private IMobileInputActions m_MobileInputActionsCallbackInterface;
    private readonly InputAction m_MobileInput_Primary;
    private readonly InputAction m_MobileInput_Secondary;
    public struct MobileInputActions
    {
        private @PlayerInputs m_Wrapper;
        public MobileInputActions(@PlayerInputs wrapper) { m_Wrapper = wrapper; }
        public InputAction @Primary => m_Wrapper.m_MobileInput_Primary;
        public InputAction @Secondary => m_Wrapper.m_MobileInput_Secondary;
        public InputActionMap Get() { return m_Wrapper.m_MobileInput; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(MobileInputActions set) { return set.Get(); }
        public void SetCallbacks(IMobileInputActions instance)
        {
            if (m_Wrapper.m_MobileInputActionsCallbackInterface != null)
            {
                @Primary.started -= m_Wrapper.m_MobileInputActionsCallbackInterface.OnPrimary;
                @Primary.performed -= m_Wrapper.m_MobileInputActionsCallbackInterface.OnPrimary;
                @Primary.canceled -= m_Wrapper.m_MobileInputActionsCallbackInterface.OnPrimary;
                @Secondary.started -= m_Wrapper.m_MobileInputActionsCallbackInterface.OnSecondary;
                @Secondary.performed -= m_Wrapper.m_MobileInputActionsCallbackInterface.OnSecondary;
                @Secondary.canceled -= m_Wrapper.m_MobileInputActionsCallbackInterface.OnSecondary;
            }
            m_Wrapper.m_MobileInputActionsCallbackInterface = instance;
            if (instance != null)
            {
                @Primary.started += instance.OnPrimary;
                @Primary.performed += instance.OnPrimary;
                @Primary.canceled += instance.OnPrimary;
                @Secondary.started += instance.OnSecondary;
                @Secondary.performed += instance.OnSecondary;
                @Secondary.canceled += instance.OnSecondary;
            }
        }
    }
    public MobileInputActions @MobileInput => new MobileInputActions(this);
    public interface IMobileInputActions
    {
        void OnPrimary(InputAction.CallbackContext context);
        void OnSecondary(InputAction.CallbackContext context);
    }
}
